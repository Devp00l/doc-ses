<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="admin_ceph_gateway.xml" version="5.0" xml:id="cha.ceph.gw">

 <title>Ceph RADOS 网关</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:maintainer>tbazant@suse.com</dm:maintainer>
        <dm:status>编辑</dm:status>
        <dm:deadline/>
        <dm:priority/>
        <dm:translation>yes</dm:translation>
        <dm:languages/>
        <dm:release>SES 5</dm:release>
      </dm:docmanager>
    </info>
    <para>
  本章介绍 RADOS 网关相关管理任务的细节，例如，检查服务的状态，管理帐户、多站点网关或 LDAP 身份验证。
 </para>
 <sect1 xml:id="ceph.rgw.operating">
  <title>操作 RADOS 网关服务</title>

  <para>
   可使用 <command>systemctl</command> 命令来操作 RADOS 网关服务。您需要拥有 <systemitem class="username">root</systemitem> 特权才能操作 RADOS 网关服务。请注意，<replaceable>网关主机</replaceable>是您需要操作其 RADOS 网关实例的服务器主机名。
  </para>

  <para>
   RADOS 网关服务支持以下子命令：
  </para>

  <variablelist>
   <varlistentry>
    <term>systemctl status ceph-radosgw@rgw.<replaceable>网关主机</replaceable>
    </term>
    <listitem>
     <para>
      列显服务的状态信息。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl start ceph-radosgw@rgw.<replaceable>网关主机</replaceable>
    </term>
    <listitem>
     <para>
      如果服务尚未运行，则将它启动。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl restart ceph-radosgw@rgw.<replaceable>网关主机</replaceable>
    </term>
    <listitem>
     <para>
      重启动服务。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl stop ceph-radosgw@rgw.<replaceable>网关主机</replaceable>
    </term>
    <listitem>
     <para>
      停止正在运行的服务。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl enable ceph-radosgw@rgw.<replaceable>网关主机</replaceable>
    </term>
    <listitem>
     <para>
      启用服务，以便在系统启动时自动启动该服务。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>systemctl disable ceph-radosgw@rgw.<replaceable>网关主机</replaceable>
    </term>
    <listitem>
     <para>
      禁用服务，以便在系统启动时不自动启动该服务。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="ceph.rgw.https">
  <title>启用 HTTPS</title>
  <sect2 xml:id="ceph.rgw.https.ceph_conf">
   <title>RADOS 网关配置</title>
   <para>
    要为默认 RADOS 网关角色启用 HTTPS，必须在 RADOS 网关节点上创建一个证书文件，并且需要在 <filename>ceph.conf</filename> 中启用端口 443。编辑 <filename>/etc/ceph/ceph.conf</filename> 中的 <literal>[rgw]</literal> 段落，以包含以下几行：
   </para>
<screen>[client.rgw.<replaceable>NODE_NAME</replaceable>]
rgw_frontends = civetweb port=443s ssl_certificate=/etc/ceph/private/keyandcert.pem</screen>
   <para>
    <filename>keyandcert.pem</filename> 必须包含密钥和证书。将 <replaceable>NODE_NAME</replaceable> 替换为节点的名称。
   </para>
  </sect2>
  <sect2 xml:id="ceph.rgw.https.deepsea">
   <title>使用 DeepSea 进行配置</title>
   <para>
    此示例过程说明如何在 Salt 主控端上生成证书，并通过 DeepSea 分发所需的更改。
   </para>
   <procedure>
    <step>
     <para>
      在 Salt 主控端上创建证书。在证书中输入运行 <command>openssl</command> 命令时所需的全部数据。输入 FQDN 作为常用名尤为有用。
     </para>
<screen><prompt>root@master # </prompt><command>mkdir</command> /srv/salt/ceph/rgw/cert
<prompt>root@master # </prompt><command>cd</command> /srv/salt/ceph/rgw/cert
<prompt>root@master # </prompt><command>openssl</command> req -x509 -nodes -days 1095 -newkey rsa:4096 -keyout rgw.key -out rgw.crt
<prompt>root@master # </prompt><command>cat</command> rgw.key &gt; rgw.pem &amp;&amp; <command>cat</command> rgw.crt &gt;&gt; rgw.pem</screen>
     <para>
      也可以使用 CA 签名的证书，并将其放在 <filename>/srv/salt/ceph/rgw/cert</filename> 目录中。<filename>rgw.pem</filename> 必须包含密钥和证书。
     </para>
    </step>
    <step>
     <para>
      编辑 <filename>/srv/salt/ceph/configuration/files/ceph.conf.rgw</filename>，将内容更改为：
     </para>
<screen>[ client.{{ client }} ]
rgw frontends = "civetweb port=443s ssl_certificate=/etc/ceph/rgw.pem"
rgw dns name = {{ grains['host'] }}</screen>
    </step>
    <step>
     <para>
      DeepSea 需要分发 <filename>rgw.pem</filename>。因此，请编辑 <filename>/srv/salt/ceph/rgw/init.sls</filename>，将其更改为：
     </para>
<screen>include:
  - .{{ salt['pillar.get']('rgw_init', 'default') }}
  - .cert</screen>
    </step>
    <step>
     <para>
      创建 <filename>/srv/salt/ceph/rgw/cert/init.sls</filename> 并添加以下内容：
     </para>
<screen>deploy the rgw.pem file:
  file.managed:
    - name: /etc/ceph/rgw.pem
    - source: salt://ceph/rgw/cert/rgw.pem
</screen>
    </step>
    <step>
     <para>执行 DeepSea 阶段 0 到 4：</para>
<screen><prompt>root@master # </prompt><command>salt-run</command> state.orch ceph.stage.0
<prompt>root@master # </prompt><command>salt-run</command> state.orch ceph.stage.1
<prompt>root@master # </prompt><command>salt-run</command> state.orch ceph.stage.2
<prompt>root@master # </prompt><command>salt-run</command> state.orch ceph.stage.3
<prompt>root@master # </prompt><command>salt-run</command> state.orch ceph.stage.4</screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="rgw.civetweb.multiport">
  <title>绑定到多个端口</title>
  <para>
   Civetweb 服务器可以绑定到多个端口。如果需要同时使用 SSL 和非 SSL 连接访问单个对象网关实例，则这种做法非常有帮助。指定端口时，请在配置行中使用加号“+”分隔端口号：
  </para>
<screen>[client.rgw.<replaceable>NODE_NAME</replaceable>]
rgw_frontends = civetweb port=80+443s ssl_certificate=/etc/ceph/private/keyandcert.pem</screen>
 </sect1>
 <sect1 xml:id="ceph.rgw.access">
  <title>管理 RADOS 网关的访问方式</title>

  <para>
   可以使用与 S3 或 Swift 兼容的接口来与 RADOS 网关通讯。S3 接口与 Amazon S3 RESTful API 的某个大型子集兼容。Swift 接口与 <phrase role="productname">OpenStack</phrase> Swift API 的某个大型子集兼容。
  </para>

  <para>
   这两个接口都要求创建特定的用户，并安装相关的客户端软件，以使用该用户的机密密钥来与网关通讯。
  </para>

  <sect2 xml:id="accessing.ragos.gateway">
   <title>访问 RADOS 网关</title>
   <sect3>
    <title>S3 接口访问</title>
    <tip>
     <para>
      S3cmd 是一个命令行 S3 客户端。可以在 <link xlink:href="https://build.opensuse.org/package/show/Cloud:Tools/s3cmd">OpenSUSE Build Service</link> 中找到它。储存库包含 SUSE Linux Enterprise 发行套件和基于 openSUSE 的发行套件的版本。
     </para>
    </tip>
    <para>
     要访问 S3 接口，需要一个 REST 客户端。<command>S3cmd</command> 是一个命令行 S3 客户端。可以在 <link xlink:href="https://build.opensuse.org/package/show/Cloud:Tools/s3cmd">OpenSUSE Build Service</link> 中找到它。储存库包含 SUSE Linux Enterprise 发行套件和基于 openSUSE 的发行套件的版本。
    </para>
    <para>
     如果您想测试自己是否能够访问 S3 接口，也可以编写一个简短的 Python 脚本。该脚本将连接到 RADOS 网关，创建新桶，并列出所有桶。<option>aws_access_key_id</option> 和 <option>aws_secret_access_key</option> 的值取自<xref linkend="adding.s3.swift.users"/>中所述 <command>radosgw_admin</command> 命令返回的 <option>access_key</option> 和 <option>secret_key</option> 的值。
    </para>
    <procedure>
     <step>
      <para>
       安装 <systemitem>python-boto</systemitem> 包：
      </para>
<screen>sudo zypper in python-boto</screen>
     </step>
     <step>
      <para>
       创建名为 <filename>s3test.py</filename> 的新 Python 脚本，并在其中包含以下内容：<remark role="fixme">Provide script in RPM? Is it really necessary to create pool? This script is not necessary at all, remove it from documentation?</remark>
      </para>
<screen>import boto
import boto.s3.connection
access_key = '11BS02LGFB6AL6H1ADMW'
secret_key = 'vzCEkuryfn060dfee4fgQPqFrncKEIkh3ZcdOANY'
conn = boto.connect_s3(
aws_access_key_id = access_key,
aws_secret_access_key = secret_key,
host = '{hostname}',
is_secure=False,
calling_format = boto.s3.connection.OrdinaryCallingFormat(),
)
bucket = conn.create_bucket('my-new-bucket')
for bucket in conn.get_all_buckets():
print "{name}\t{created}".format(
name = bucket.name,
created = bucket.creation_date,
)</screen>
      <para>
       将 <literal>{hostname}</literal> 替换为在其中配置了 RADOS 网关服务的主机的主机名，例如<literal>网关主机</literal>。
      </para>
     </step>
     <step>
      <para>
       运行脚本：
      </para>
<screen>python s3test.py</screen>
      <para>
       该脚本将输出如下所示的信息：
      </para>
<screen>my-new-bucket 2015-07-22T15:37:42.000Z</screen>
     </step>
    </procedure>
   </sect3>
   <sect3>
    <title>Swift 接口访问</title>
    <para>
     要通过 Swift 接口访问 RADOS 网关，需要使用 <command>swift</command> 命令行客户端。该接口的手册页 <command>man 1 swift</command> 介绍了有关其命令行选项的详细信息。
    </para>
    <para>
     SUSE Linux Enterprise 12 SP3 的“公共云”模块中已包含相应的包。在安装该包之前，需要激活该模块并刷新软件储存库：
    </para>
<screen>sudo SUSEConnect -p sle-module-public-cloud/12/x86_64
sudo zypper refresh</screen>
    <para>
     要安装 <command>swift</command> 命令，请运行以下命令：
    </para>
<screen>sudo zypper in python-swiftclient</screen>
    <para>
     使用以下语法进行 swift 访问：
    </para>
<screen>swift -A http://<replaceable>IP_ADDRESS</replaceable>/auth/1.0 \
-U example_user:swift -K '<replaceable>swift_secret_key</replaceable>' list</screen>
    <para>
     请将 <replaceable>IP_ADDRESS</replaceable> 替换为网关服务器的 IP 地址，将 <replaceable>swift_secret_key</replaceable> 替换为在<xref linkend="adding.s3.swift.users"/>中针对 <systemitem>swift</systemitem> 用户执行 <command>radosgw-admin key create</command> 命令后的输出中的相应值。
    </para>
    <para>
     例如：
    </para>
<screen>swift -A http://gateway.example.com/auth/1.0 -U example_user:swift \
-K 'r5wWIxjOCeEO7DixD1FjTLmNYIViaC6JVhi3013h' list</screen>
    <para>
     输出为：
    </para>
<screen>my-new-bucket</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="s3.swift.accounts.managment">
   <title>管理 S3 和 Swift 帐户</title>
   <sect3 xml:id="adding.s3.swift.users">
    <title>添加 S3 和 Swift 用户</title>
    <para>
     需要创建用户、访问密钥和机密才能让最终用户与网关交互。用户分两种类型：<emphasis>用户</emphasis>和<emphasis>子用户</emphasis>。与 S3 接口交互时使用<emphasis>用户</emphasis>，<emphasis>子用户</emphasis>是 Swift 接口的用户。每个子用户都与某个用户相关联。
    </para>
    <para>
     也可以通过 DeepSea 文件 <filename>rgw.sls</filename> 添加用户。有关示例，请参见<xref linkend="ceph.nfsganesha.customrole.rgw_multiusers"/>。
    </para>
    <para>
     要创建 Swift 用户，请执行以下步骤：
    </para>
    <procedure>
     <step>
      <para>
       要创建 Swift 用户（在我们的术语中称作<emphasis>子用户</emphasis>），需要先创建关联的<emphasis>用户</emphasis>。
      </para>
<screen>sudo radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>
      <para>
       例如：
      </para>
<screen>sudo radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>
     </step>
     <step>
      <para>
       要创建用户的子用户（用于 Swift 接口），必须指定用户 ID（--uid=<replaceable>用户名</replaceable>）、子用户 ID 和该子用户的访问级别。
      </para>
<screen>sudo radosgw-admin subuser create --uid=<replaceable>uid</replaceable> \
 --subuser=<replaceable>uid</replaceable> \
 --access=[ <replaceable>read | write | readwrite | full</replaceable> ]</screen>
      <para>
       例如：
      </para>
<screen>sudo radosgw-admin subuser create --uid=example_user \
 --subuser=example_user:swift --access=full</screen>
     </step>
     <step>
      <para>
       为用户生成机密密钥。
      </para>
<screen>sudo radosgw-admin key create \
   --gen-secret \
   --subuser=example_user:swift \
   --key-type=swift</screen>
     </step>
     <step>
      <para>
       这两个命令都会输出 JSON 格式的数据，其中显示了用户状态。请注意以下几行，并记住 <literal>secret_key</literal> 值：
      </para>
<screen>"swift_keys": [
   { "user": "example_user:swift",
     "secret_key": "r5wWIxjOCeEO7DixD1FjTLmNYIViaC6JVhi3013h"}],</screen>
     </step>
    </procedure>
    <para/>
    <para>
     通过 S3 接口访问 RADOS 网关时，需要运行以下命令来创建 S3 用户：
    </para>
<screen>sudo radosgw-admin user create --uid=<replaceable>username</replaceable> \
 --display-name="<replaceable>display-name</replaceable>" --email=<replaceable>email</replaceable></screen>
    <para>
     例如：
    </para>
<screen>sudo radosgw-admin user create \
   --uid=example_user \
   --display-name="Example User" \
   --email=penguin@example.com</screen>
    <para>
     该命令还会创建用户的访问密钥和机密密钥。检查该命令针对 <literal>access_key</literal> 和 <literal>secret_key</literal> 关键字及其值的输出：
    </para>
<screen>[...]
 "keys": [
       { "user": "example_user",
         "access_key": "11BS02LGFB6AL6H1ADMW",
         "secret_key": "vzCEkuryfn060dfee4fgQPqFrncKEIkh3ZcdOANY"}],
 [...]</screen>
   </sect3>
   <sect3 xml:id="removing.s3.swift.users">
    <title>去除 S3 和 Swift 用户</title>
    <para>
     删除 S3 用户的过程与删除 Swift 用户类似。但是，在删除 Swift 用户时，可能需要同时删除该用户及其子用户。
    </para>
    <para>
     要去除 S3 或 Swift 用户（包括其所有子用户），请在以下命令中指定 <option>user rm</option> 和用户 ID：
    </para>
<screen>sudo radosgw-admin user rm --uid=example_user</screen>
    <para>
     要去除子用户，请指定 <option>subuser rm</option> 和子用户 ID。
    </para>
<screen>sudo radosgw-admin subuser rm --uid=example_user:swift</screen>
    <para>
     可使用以下选项：
    </para>
    <variablelist>
     <varlistentry>
      <term>--purge-data</term>
      <listitem>
       <para>
        清除与用户 ID 关联的所有数据。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>--purge-keys</term>
      <listitem>
       <para>
        清除与用户 ID 关联的所有密钥。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <tip>
     <title>去除子用户</title>
     <para>
      去除某个子用户时，会去除该子用户对 Swift 接口的访问权限。关联的用户会保留在系统中。
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="changing.s3.swift.users.password">
    <title>更改 S3 和 Swift 用户的访问密钥与机密密钥</title>
    <para>
     访问网关时，<literal>access_key</literal> 和 <literal>secret_key</literal> 参数用于识别 RADOS 网关用户。更改现有用户密钥的过程与创建新用户密钥的过程相同，旧密钥将被重写。
    </para>
    <para>
     对于 S3 用户，请运行以下命令：
    </para>
<screen>sudo radosgw-admin key create --uid=<replaceable>example_user</replaceable> --key-type=s3 --gen-access-key --gen-secret</screen>
    <para>
     对于 Swift 用户，请运行以下命令：
    </para>
<screen>sudo radosgw-admin key create --subuser=<replaceable>example_user</replaceable>:swift --key-type=swift --gen-secret</screen>
    <variablelist>
     <varlistentry>
      <term><option>--key-type=<replaceable>类型</replaceable></option>
      </term>
      <listitem>
       <para>
        指定密钥的类型。值为 <literal>swift</literal> 或 <literal>s3</literal>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--gen-access-key</option>
      </term>
      <listitem>
       <para>
        生成随机访问密钥（默认针对 S3 用户）。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--gen-secret</option>
      </term>
      <listitem>
       <para>
        生成随机机密密钥。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--secret=<replaceable>密钥</replaceable></option>
      </term>
      <listitem>
       <para>
        指定机密密钥，例如手动生成的密钥。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="user.quota.managment">
    <title>用户配额管理</title>
    <para>
     Ceph RADOS 网关允许您针对用户以及用户拥有的桶设置配额。配额包括一个桶中的最大对象数，以及最大储存大小 (MB)。
    </para>
    <para>
     在启用用户配额之前，需要先设置该配额的参数：
    </para>
<screen>sudo radosgw-admin quota set --quota-scope=user --uid=<replaceable>example_user</replaceable> \
 --max-objects=1024 --max-size=1024</screen>
    <variablelist>
     <varlistentry>
      <term><option>--max-objects</option>
      </term>
      <listitem>
       <para>
        指定最大对象数。指定负值会禁用检查。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--max-size</option>
      </term>
      <listitem>
       <para>
        指定最大字节数。指定负值会禁用检查。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>--quota-scope</option>
      </term>
      <listitem>
       <para>
        设置配额的范围。选项包括 <literal>bucket</literal> 和 <literal>user</literal>。Bucket 配额将应用到用户拥有的桶。User 配额将应用到用户。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     设置用户配额后，可启用该配额：
    </para>
<screen>sudo radosgw-admin quota enable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>
    <para>
     要禁用配额，请执行以下命令：
    </para>
<screen>sudo radosgw-admin quota disable --quota-scope=user --uid=<replaceable>example_user</replaceable></screen>
    <para>
     要列出配额设置，请执行以下命令：
    </para>
<screen>sudo radosgw-admin user info --uid=<replaceable>example_user</replaceable></screen>
    <para>
     要更新配额统计数字，请执行以下命令：
    </para>
<screen>sudo radosgw-admin user stats --uid=<replaceable>example_user</replaceable> --sync-stats</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph.rgw.fed">


  <title>多站点对象储存网关</title>

  <para>
   您可将每个 RADOS 网关配置为参与联合体系结构，在活动区域配置中工作，同时允许写入非主区域。<remark role="fixme">What is a master zone? Explained in next section but maybe it is better to first explain the term before using it. Explanation of federated architecture is also not provided. Meaning, benefits, setup, etc. This section needs some sort of introduction.</remark>
  </para>

  <sect2 xml:id="ceph.rgw.fed.term">
   <title>术语</title>
   <para>
    下面解释了联合体系结构的专用术语：
   </para>
   <variablelist>
    <varlistentry>
     <term>区域</term>
     <listitem>
      <para>
       一个或多个 RADOS 网关实例的逻辑分组。必须将<emphasis>区域组</emphasis>中的一个区域指定为<emphasis>主</emphasis>区域，负责处理所有桶和用户的创建。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>区域组</term>
     <listitem>
      <para>
       一个区域组由多个区域组成。应存在一个将负责处理系统配置更改的主区域组。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>区域组拓扑图</term>
     <listitem>
      <para>
       用于存放整个系统拓扑图的配置结构，例如，哪个区域组是主区域组、不同区域组之间的关系，以及储存策略等特定配置选项。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>领域</term>
     <listitem>
      <para>
       区域组的容器。使用领域可在群集之间分隔区域组。可以创建多个领域，以便在同一群集中更轻松地运行完全不同的配置。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>周期</term>
     <listitem>
      <para>
       周期存放领域当前状态的配置结构。每个周期都包含一个唯一 ID 和一个时期。每个领域都有一个关联的当前周期，该周期存放区域组状态的当前配置和储存策略。非主区域发生任何配置更改都会递增周期的时期。将主区域更改为其他区域将触发以下更改：
      </para>
      <itemizedlist>
       <listitem>
        <para>
         生成具有新周期 ID 和时期为 1 的新周期。
        </para>
       </listitem>
       <listitem>
        <para>
         领域的当前周期会更新，以指向新生成的周期 ID。
        </para>
       </listitem>
       <listitem>
        <para>
         领域的时期将会递增。
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.intro">
   <title>示例群集设置</title>
   <para>
    本示例重点演示如何创建包含三个不同区域的单个区域组，这三个区域会主动同步其数据。其中两个区域属于同一群集，第三个区域属于不同的群集。在 RADOS 网关之间镜像数据更改时，不需要同步代理的参与。这样，便大大简化了配置模式和活动-活动配置。请注意，元数据操作（例如创建新用户）仍需要通过主区域处理。但是，数据操作（例如创建桶和对象）可由任意区域处理。
   </para>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.keys">
   <title>系统密钥</title>
   <para>
    配置区域时，RADOS 网关预期会创建与 S3 兼容的系统用户，以及他们的访问密钥和机密密钥。这样，另一个 RADOS 网关实例便可以使用该访问密钥和机密密钥远程提取配置。有关创建 S3 用户的详细信息，请参见<xref linkend="adding.s3.swift.users"/>。
   </para>
   <tip>
    <para>
     在创建区域本身之前生成访问密钥和机密密钥非常有帮助，因为这可以让稍后的脚本编写和配置管理工具的使用变得更容易。
    </para>
   </tip>
   <para>
    对于本示例，我们假设已在环境变量中设置访问密钥和机密密钥：
   </para>
<screen># SYSTEM_ACCESS_KEY=1555b35654ad1656d805
# SYSTEM_SECRET_KEY=h7GhxuBLTrlhVUyxSPUKUV8r/2EI4ngqJxD7iBdBYLhwluN30JaT3Q==</screen>
   <para>
    一般情况下，访问密钥包括 20 个字母数字字符，而机密密钥包括 40 个字母数字字符（也可以包含 +/= 字符）。可在命令行中生成这些密钥：
   </para>
<screen># SYSTEM_ACCESS_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
# SYSTEM_SECRET_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 40 | head -n 1)</screen>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.naming">
   <title>命名约定</title>
   <para>
    本示例介绍设置主区域的过程。假设有一个名为 <literal>us</literal> 的区域组，该区域组横跨美国，并且将成为主区域组。该区域组将包含以<replaceable>区域组</replaceable>-<replaceable>区域</replaceable>格式编写的两个区域。这只是我们一贯采用的格式，您可以选择偏好的格式。概括如下：
   </para>
   <itemizedlist>
    <listitem>
     <para>
      主区域组：美国：<literal>us</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      主区域：美国东部区域 1：<literal>us-east-1</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      次要区域：美国东部区域 2：<literal>us-east-2</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      次要区域：美国西部区域：<literal>us-west</literal>
     </para>
    </listitem>
   </itemizedlist>
   <para>
    此配置将属于名为 <literal>gold</literal> 的较大型领域。<literal>us-east-1</literal> 和 <literal>us-east-2</literal> 区域属于同一个 Ceph 群集，<literal>us-east-1</literal> 是主区域。<literal>us-west</literal> 在另一个不同的 Ceph 群集中。
   </para>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.pools">
   <title>默认池</title>
   <para>
    配置了相应的权限后，RADOS 网关可自行创建默认池。<literal>pg_num</literal> 和 <literal>pgp_num</literal> 值取自 <filename>ceph.conf</filename> 配置文件。默认情况下，与区域相关的池遵循<replaceable>区域名称</replaceable>.<replaceable>池名称</replaceable>格式约定。以 <literal>us-east-1</literal> 区域为例，它将创建以下池：
   </para>
<screen>.rgw.root
us-east-1.rgw.control
us-east-1.rgw.data.root
us-east-1.rgw.gc
us-east-1.rgw.log
us-east-1.rgw.intent-log
us-east-1.rgw.usage
us-east-1.rgw.users.keys
us-east-1.rgw.users.email
us-east-1.rgw.users.swift
us-east-1.rgw.users.uid
us-east-1.rgw.buckets.index
us-east-1.rgw.buckets.data
us-east-1.rgw.meta</screen>
   <para>
    也可以在其他区域中创建这些池，只需将 <literal>us-east-1</literal> 替换为相应的区域名称即可。
   </para>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.realm">
   <title>创建领域</title>
   <para>
    配置名为 <literal>gold</literal> 的领域，并将其设为默认领域：
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin realm create --rgw-realm=gold --default
{
  "id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "name": "gold",
  "current_period": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "epoch": 1
}</screen>
   <para>
    请注意，每个领域都有一个 ID，这样，以后便可灵活地执行所需的操作（例如，重命名领域）。每当我们更改主区域中的任何设置时，<literal>current_period</literal> 都会发生变化。如果主区域的配置发生更改，导致当前周期发生更改，<literal>epoch</literal> 将会递增。
   </para>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.deldefzonegrp">
   <title>删除默认区域组</title>
   <para>
    采用默认设置安装 RADOS 网关时会创建名为 <literal>default</literal> 的默认区域组。由于我们不再需要默认区域组，因此可将其去除。
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup delete --rgw-zonegroup=default</screen>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.createmasterzonegrp">
   <title>创建主区域组</title>
   <para>
    创建名为 <literal>us</literal> 的主区域组。该区域组将管理区域组拓扑图，并将更改传播到系统的其余组件。通过将某个区域组标记为默认区域组，可以明确指定要在后续命令中使用的 rgw-zonegroup 开关。
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup create --rgw-zonegroup=us \
--endpoints=http://rgw1:80 --master --default
{
  "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "name": "us",
  "api_name": "us",
  "is_master": "true",
  "endpoints": [
      "http:\/\/rgw1:80"
  ],
  "hostnames": [],
  "hostnames_s3website": [],
  "master_zone": "",
  "zones": [],
  "placement_targets": [],
  "default_placement": "",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   <para>
    或者，可使用以下命令将某个区域组标记为默认区域组：
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup default --rgw-zonegroup=us</screen>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.masterzone">
   <title>创建主区域</title>
   <para>
    现在，请创建一个默认区域并将其添加到默认区域组。请注意，在执行元数据操作（例如创建用户）时将要用到此区域：
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone create --rgw-zonegroup=us --rgw-zone=us-east-1 \
--endpoints=http://rgw1:80 --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "name": "us-east-1",
  "domain_root": "us-east-1/gc.rgw.data.root",
  "control_pool": "us-east-1/gc.rgw.control",
  "gc_pool": "us-east-1/gc.rgw.gc",
  "log_pool": "us-east-1/gc.rgw.log",
  "intent_log_pool": "us-east-1/gc.rgw.intent-log",
  "usage_log_pool": "us-east-1/gc.rgw.usage",
  "user_keys_pool": "us-east-1/gc.rgw.users.keys",
  "user_email_pool": "us-east-1/gc.rgw.users.email",
  "user_swift_pool": "us-east-1/gc.rgw.users.swift",
  "user_uid_pool": "us-east-1/gc.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-east-1/gc.rgw.buckets.index",
              "data_pool": "us-east-1/gc.rgw.buckets.data",
              "data_extra_pool": "us-east-1/gc.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-east-1/gc.rgw.meta",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   <para>
    请注意，<option>--rgw-zonegroup</option> 和 <option>--default</option> 开关会将该区域添加到某个区域组，并将其设为默认区域。或者，也可以使用以下命令实现相同的效果：
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone default --rgw-zone=us-east-1
<prompt>cephadm &gt; </prompt>radosgw-admin zonegroup add --rgw-zonegroup=us --rgw-zone=us-east-1</screen>
   <sect3 xml:id="ceph.rgw.fed.masterzone.createuser">
    <title>创建系统用户</title>
    <para>
     要访问区域池，需要创建一个系统用户。请注意，在配置次要区域时，也需要这些密钥。
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin user create --uid=zone.user \
--display-name="Zone User" --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> \
--secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable> --system</screen>
   </sect3>
   <sect3 xml:id="ceph.rgw.fed.masterzone.updateperiod">
    <title>更新周期</title>
    <para>
     由于您已更改主区域配置，因此需要提交这些更改，使其在领域配置结构中生效。最初的周期如下所示：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period get
{
  "id": "09559832-67a4-4101-8b3f-10dfcd6b2707", "epoch": 1, "predecessor_uuid": "", "sync_status": [], "period_map":
  {
    "id": "09559832-67a4-4101-8b3f-10dfcd6b2707", "zonegroups": [], "short_zone_ids": []
  }, "master_zonegroup": "", "master_zone": "", "period_config":
  {
     "bucket_quota": {
     "enabled": false, "max_size_kb": -1, "max_objects": -1
     }, "user_quota": {
       "enabled": false, "max_size_kb": -1, "max_objects": -1
     }
  }, "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7", "realm_name": "gold", "realm_epoch": 1
}</screen>
    <para>
     更新周期并提交更改：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period update --commit
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 1,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [ "[...]"
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "false",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }
              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          }
      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
   </sect3>
   <sect3 xml:id="ceph.rgw.fed.masterzone.startrgw">
    <title>启动 RADOS 网关</title>
    <para>
     在启动 RADOS 网关之前，需要在配置文件中指定 RADOS 网关区域和端口选项。有关 RADOS 网关及其配置的详细信息，请参见<xref linkend="cha.ceph.gw"/>。RADOS 网关的配置段落应如下所示：
    </para>
<screen>[client.rgw.us-east-1]
rgw_frontends="civetweb port=80"
rgw_zone=us-east-1</screen>
    <para>
     启动 RADOS 网关：
    </para>
<screen>sudo systemctl start ceph-radosgw@rgw.us-east-1</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.secondaryzone">
   <title>创建次要区域</title>
   <para>
    在同一个群集中，创建并配置名为 <literal>us-east-2</literal> 的次要区域。可在托管主区域本身的节点中执行以下所有命令。
   </para>
   <para>
    要创建次要区域，请使用创建主要区域时所用的相同命令，不过需要去掉 master 标志：
   </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone create --rgw-zonegroup=us --endpoints=http://rgw2:80 \
--rgw-zone=us-east-2 --access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
  "name": "us-east-2",
  "domain_root": "us-east-2.rgw.data.root",
  "control_pool": "us-east-2.rgw.control",
  "gc_pool": "us-east-2.rgw.gc",
  "log_pool": "us-east-2.rgw.log",
  "intent_log_pool": "us-east-2.rgw.intent-log",
  "usage_log_pool": "us-east-2.rgw.usage",
  "user_keys_pool": "us-east-2.rgw.users.keys",
  "user_email_pool": "us-east-2.rgw.users.email",
  "user_swift_pool": "us-east-2.rgw.users.swift",
  "user_uid_pool": "us-east-2.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-east-2.rgw.buckets.index",
              "data_pool": "us-east-2.rgw.buckets.data",
              "data_extra_pool": "us-east-2.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-east-2.rgw.meta",
  "realm_id": "815d74c2-80d6-4e63-8cfc-232037f7ff5c"
}</screen>
   <sect3 xml:id="ceph.rgw.fed.secondzone.updateperiod">
    <title>更新周期</title>
    <para>
     通过执行周期更新并提交更改，通知所有网关有关系统拓扑图中发生的新变化：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period update --commit
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 2,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [ "[...]"
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "false",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                  {
                      "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
                      "name": "us-east-2",
                      "endpoints": [
                          "http:\/\/rgw2:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }

              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          },
          {
              "key": "950c1a43-6836-41a2-a161-64777e07e8b8",
              "val": 4276257543
          }

      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
   </sect3>
   <sect3 xml:id="ceph.rgw.fed.secondzone.startrgw">
    <title>启动 RADOS 网关</title>
    <para>
     调整次要区域的 RADOS 网关配置，并启动网关：
    </para>
<screen>[client.rgw.us-east-2]
rgw_frontends="civetweb port=80"
rgw_zone=us-east-2</screen>
<screen><prompt>cephadm &gt; </prompt>sudo systemctl start ceph-radosgw@rgw.us-east-2</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph.rgw.fed.seccluster">
   <title>将 RADOS 网关添加到第二个群集</title>
   <para>
    第二个 Ceph 群集与初始群集属于同一个区域组，不过可以位于不同的地理位置。
   </para>
   <sect3 xml:id="ceph.rgw.fed.seccluster.realm">
    <title>默认领域和区域组</title>
    <para>
     由于已创建第一个网关的领域，因此可在此处提取该领域并将其设为默认领域：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin realm pull --url=http://rgw1:80 \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable>
{
  "id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "name": "gold",
  "current_period": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 2
}
<prompt>cephadm &gt; </prompt>radosgw-admin realm default --rgw-realm=gold</screen>
    <para>
     通过提取周期，从主区域中获取配置：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period pull --url=http://rgw1:80 \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable></screen>
    <para>
     将默认区域组设置为已创建的 <literal>us</literal> 区域组：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zonegroup default --rgw-zonegroup=us</screen>
   </sect3>
   <sect3 xml:id="ceph.rgw.fed.seccluster.seczone">
    <title>次要区域配置</title>
    <para>
     使用相同的系统密钥创建名为 <literal>us-west</literal> 的新区域：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin zone create --rgw-zonegroup=us --rgw-zone=us-west \
--access-key=<replaceable>$SYSTEM_ACCESS_KEY</replaceable> --secret=<replaceable>$SYSTEM_SECRET_KEY</replaceable> \
--endpoints=http://rgw3:80 --default
{
  "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
  "name": "us-west",
  "domain_root": "us-west.rgw.data.root",
  "control_pool": "us-west.rgw.control",
  "gc_pool": "us-west.rgw.gc",
  "log_pool": "us-west.rgw.log",
  "intent_log_pool": "us-west.rgw.intent-log",
  "usage_log_pool": "us-west.rgw.usage",
  "user_keys_pool": "us-west.rgw.users.keys",
  "user_email_pool": "us-west.rgw.users.email",
  "user_swift_pool": "us-west.rgw.users.swift",
  "user_uid_pool": "us-west.rgw.users.uid",
  "system_key": {
      "access_key": "1555b35654ad1656d804",
      "secret_key": "h7GhxuBLTrlhVUyxSPUKUV8r\/2EI4ngqJxD7iBdBYLhwluN30JaT3Q=="
  },
  "placement_pools": [
      {
          "key": "default-placement",
          "val": {
              "index_pool": "us-west.rgw.buckets.index",
              "data_pool": "us-west.rgw.buckets.data",
              "data_extra_pool": "us-west.rgw.buckets.non-ec",
              "index_type": 0
          }
      }
  ],
  "metadata_heap": "us-west.rgw.meta",
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
}</screen>
   </sect3>
   <sect3 xml:id="ceph.rgw.fed.seccluster.period">
    <title>更新周期</title>
    <para>
     为了传播区域组拓扑图更改，我们将更新并提交周期：
    </para>
<screen><prompt>cephadm &gt; </prompt>radosgw-admin period update --commit --rgw-zone=us-west
{
  "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
  "epoch": 3,
  "predecessor_uuid": "09559832-67a4-4101-8b3f-10dfcd6b2707",
  "sync_status": [
      "", # truncated
  ],
  "period_map": {
      "id": "b5e4d3ec-2a62-4746-b479-4b2bc14b27d1",
      "zonegroups": [
          {
              "id": "d4018b8d-8c0d-4072-8919-608726fa369e",
              "name": "us",
              "api_name": "us",
              "is_master": "true",
              "endpoints": [
                  "http:\/\/rgw1:80"
              ],
              "hostnames": [],
              "hostnames_s3website": [],
              "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "zones": [
                  {
                      "id": "83859a9a-9901-4f00-aa6d-285c777e10f0",
                      "name": "us-east-1",
                      "endpoints": [
                          "http:\/\/rgw1:80"
                      ],
                      "log_meta": "true",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                                  {
                      "id": "950c1a43-6836-41a2-a161-64777e07e8b8",
                      "name": "us-east-2",
                      "endpoints": [
                          "http:\/\/rgw2:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  },
                  {
                      "id": "d9522067-cb7b-4129-8751-591e45815b16",
                      "name": "us-west",
                      "endpoints": [
                          "http:\/\/rgw3:80"
                      ],
                      "log_meta": "false",
                      "log_data": "true",
                      "bucket_index_max_shards": 0,
                      "read_only": "false"
                  }
              ],
              "placement_targets": [
                  {
                      "name": "default-placement",
                      "tags": []
                  }
              ],
              "default_placement": "default-placement",
              "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7"
          }
      ],
      "short_zone_ids": [
          {
              "key": "83859a9a-9901-4f00-aa6d-285c777e10f0",
              "val": 630926044
          },
          {
              "key": "950c1a43-6836-41a2-a161-64777e07e8b8",
              "val": 4276257543
          },
          {
              "key": "d9522067-cb7b-4129-8751-591e45815b16",
              "val": 329470157
          }
      ]
  },
  "master_zonegroup": "d4018b8d-8c0d-4072-8919-608726fa369e",
  "master_zone": "83859a9a-9901-4f00-aa6d-285c777e10f0",
  "period_config": {
      "bucket_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      },
      "user_quota": {
          "enabled": false,
          "max_size_kb": -1,
          "max_objects": -1
      }
  },
  "realm_id": "4a367026-bd8f-40ee-b486-8212482ddcd7",
  "realm_name": "gold",
  "realm_epoch": 2
}</screen>
    <para>
     请注意，周期的时期数字已递增，表示配置发生了更改。
    </para>
   </sect3>
   <sect3 xml:id="ceph.rgw.fed.seccluster.rgwstart">
    <title>启动 RADOS 网关</title>
    <para>
     此操作与在第一个区域中启动 RADOS 网关类似。唯一的差别在于，RADOS 网关区域配置应反映 <literal>us-west</literal> 区域名称：
    </para>
<screen>[client.rgw.us-west]
rgw_frontends="civetweb port=80"
rgw_zone=us-west</screen>
    <para>
     启动第二个 RADOS 网关：
    </para>
<screen>sudo systemctl start ceph-radosgw@rgw.us-west</screen>
   </sect3>
  </sect2>
  <sect2 xml:id="ceph.rgw.fed.failover">
   <title>故障转移和灾难恢复</title>
   <para>
    如果主区域发生故障，将故障转移到次要区域，以实现灾难恢复。
   </para>
   <procedure>
    <step>
     <para>
      将次要区域设为主区域和默认区域。例如：
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default
     </screen>
     <para>
      默认情况下，Ceph 对象网关将以活动-活动配置运行。如果已将群集配置为以主动-被动配置运行，则次要区域是只读区域。去除 --read-only 状态可让区域接收写入操作。例如：
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default \
--read-only=False
     </screen>
    </step>
    <step>
     <para>
      更新周期，使更改生效。
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      最后，重启动 Ceph 对象网关。
     </para>
     <screen>
<prompt>root # </prompt><command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
   </procedure>
   <para>
    如果之前的主区域已恢复，请逆向操作。
   </para>
   <procedure>
    <step>
     <para>
      在已恢复的区域中，从当前主区域提取周期。
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> period pull --url={url-to-master-zone-gateway} \
--access-key={access-key} --secret={secret}
     </screen>
    </step>
    <step>
     <para>
      将已恢复的区域设为主区域和默认区域。
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --master --default
     </screen>
    </step>
    <step>
     <para>
      更新周期，使更改生效。
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      然后，在已恢复的区域中重启动 Ceph 对象网关。
     </para>
     <screen>
<prompt>root # </prompt><command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
    <step>
     <para>
      如果次要区域需要采用只读配置，请更新次要区域。
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --read-only
     </screen>
    </step>
    <step>
     <para>
      更新周期，使更改生效。
     </para>
     <screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
     </screen>
    </step>
    <step>
     <para>
      最后，在次要区域中重启动 Ceph 对象网关。
     </para>
     <screen>
<prompt>root # </prompt><command>systemctl</command> restart ceph-radosgw@rgw.`hostname -s`
     </screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph.rgw.sync">
  <title>同步模块</title>
  <para>
   使用 Jewel 中引入的 RADOS 网关<emphasis>多站点</emphasis>功能可用于创建多个区域，并在这些区域之间镜像数据和元数据。<emphasis>同步模块</emphasis>构建在多站点框架的基础上，可将数据和元数据转发到不同的外部层。每当发生数据更改（创建桶或用户等元数据操作也视为数据更改）时，可以通过同步模块执行一系列操作。由于 rgw 多站点更改最终会在远程站点上保持一致，因此，更改将以异步方式传播。这样，便可以实现多种用例，例如，将对象储存备份到外部云群集或使用磁带机的自定义备份解决方案、在 Elasticsearch 中为元数据编制索引，等等。
  </para>

  <sect2 xml:id="ceph.rgw.sync.zones">
   <title>同步区域</title>
   <para>
    同步模块的配置位于区域本地。同步模块会确定区域是要导出数据，还是只能使用已在另一区域中修改的数据。从 Luminous 版本开始，支持的同步插件包括 <literal>elasticsearch</literal>、<literal>rgw</literal>和 <literal>log</literal>，其中 rgw 是在区域之间同步数据的默认同步插件，log 是记录远程区域中发生的元数据操作的普通同步插件。以下各节内容包含了使用 <literal>elasticsearch</literal> 同步模块的区域示例。其过程与配置任何其他同步插件都类似。
   </para>
   <note>
    <title>默认同步插件</title>
    <para>
     <literal>rgw</literal> 是默认的同步插件，不需要对此进行显式配置。
    </para>
   </note>
   <sect3 xml:id="ceph.rgw.sync.zones.req">
   <title>要求和假设</title>
   <para>
    假设已根据<xref linkend="ceph.rgw.fed"/>中所述创建了一个简单的多站点配置，它由 <literal>us-east</literal> 和 <literal>us-west</literal> 这两个区域组成。现在，我们添加第三个区域 <literal>us-east-es</literal>，此区域只处理来自其他站点的元数据。此区域可与 <literal>us-east</literal> 位于相同或不同的 Ceph 群集中。此区域只使用来自其他区域的元数据，此区域中的 RADOS 网关不会直接为任何最终用户请求提供服务。
    </para>
   </sect3>
   <sect3 xml:id="ceph.rgw.sync.zones.configure">
    <title>配置同步模块</title>
    <procedure>
     <step>
      <para>
       创建类似于<xref linkend="ceph.rgw.fed"/>中所述区域的第三个区域，例如
      </para>
      <screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone create --rgw-zonegroup=us --rgw-zone=us-east-es \
--access-key={system-key} --secret={secret} --endpoints=http://rgw-es:80
      </screen>
     </step>
     <step>
      <para>
       可通过以下命令配置此区域的同步模块
      </para>
      <screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --tier-type={tier-type} \
--tier-config={set of key=value pairs}
      </screen>
     </step>
     <step>
      <para>
       例如，在 <literal>elasticsearch</literal> 同步模块中运行以下命令
      </para>
      <screen>
<prompt>root # </prompt><command>radosgw-admin</command> zone modify --rgw-zone={zone-name} --tier-type=elasticsearch \
--tier-config=endpoint=http://localhost:9200,num_shards=10,num_replicas=1
      </screen>
      <para>
       有关支持的各个 tier-config 选项，请参见<xref linkend="ceph.rgw.sync.elastic"/>。
      </para>
     </step>
     <step>
      <para>
       最后，更新周期
      </para>
      <screen>
<prompt>root # </prompt><command>radosgw-admin</command> period update --commit
      </screen>
     </step>
     <step>
      <para>
       现在，在区域中启动 radosgw
      </para>
      <screen>
<prompt>root # </prompt><command>systemctl</command> start ceph-radosgw@rgw.`hostname -s`
<prompt>root # </prompt><command>systemctl</command> enable ceph-radosgw@rgw.`hostname -s`
      </screen>
     </step>
    </procedure>
   </sect3>
  </sect2>
  <sect2 xml:id="ceph.rgw.sync.elastic">
   <title>在 Elasticsearch 中储存元数据</title>
   <para>
    此同步模块会将来自其他区域的元数据写入 Elasticsearch。从 Luminous 版本开始，我们当前储存在 Elasticsearch 中的是数据字段的 JSON。
   </para>
   <screen>
{
  "_index" : "rgw-gold-ee5863d6",
  "_type" : "object",
  "_id" : "34137443-8592-48d9-8ca7-160255d52ade.34137.1:object1:null",
  "_score" : 1.0,
  "_source" : {
    "bucket" : "testbucket123",
    "name" : "object1",
    "instance" : "null",
    "versioned_epoch" : 0,
    "owner" : {
      "id" : "user1",
      "display_name" : "user1"
    },
    "permissions" : [
      "user1"
    ],
    "meta" : {
      "size" : 712354,
      "mtime" : "2017-05-04T12:54:16.462Z",
      "etag" : "7ac66c0f148de9519b8bd264312c4d64"
    }
  }
}
   </screen>
   <sect3 xml:id="ceph.rgw.sync.elastic.config">
    <title>Elasticsearch 层类型配置参数</title>
    <variablelist>
     <varlistentry>
      <term>endpoint</term>
      <listitem>
       <para>
        指定要访问的 Elasticsearch 服务器端点。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>num_shards</term>
      <listitem>
       <para>
        <emphasis>（整数）</emphasis>数据同步初始化时为 Elasticsearch 配置的分片数量。请注意，初始化之后将无法更改此数量。在此处进行任何更改都需要重构建 Elasticsearch 索引，并重新初始化数据同步进程。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>num_replicas</term>
      <listitem>
       <para>
        <emphasis>（整数）</emphasis>数据同步初始化时为 Elasticsearch 配置的复本数量。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>explicit_custom_meta</term>
      <listitem>
       <para>
        <emphasis>(true | false)</emphasis> 指定是否将为所有用户自定义元数据编制索引，或者用户是否需要配置（在桶级别）应为哪些客户元数据项编制索引。此参数默认为 false
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>index_buckets_list</term>
      <listitem>
       <para>
        <emphasis>（逗号分隔的字符串列表）</emphasis>如果为空，则为所有桶编制索引。否则，只为此处指定的桶编制索引。可以提供桶前缀（例如“foo*”）或桶后缀（例如“*bar”）。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>approved_owners_list</term>
      <listitem>
       <para>
        <emphasis>（逗号分隔的字符串列表）</emphasis>如果为空，将为所有拥有者的桶编制索引（需遵守其他限制）；否则，将只为指定拥有者拥有的桶编制索引。也可以提供后缀和前缀。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>override_index_path</term>
      <listitem>
       <para>
        <emphasis>（字符串）</emphasis>如果非空，则此字符串将用作 Elasticsearch 索引路径。否则，将在同步初始化时确定并生成索引路径。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="ceph.rgw.sync.elastic.query">
    <title>元数据查询</title>
    <para>
     由于 Elasticsearch 群集现在储存对象元数据，因此务必确保 Elasticsearch 端点不会向公众公开，只有群集管理员可访问它们。向最终用户自己公开元数据查询会造成问题，因为我们希望该用户只查询自己的元数据，而不能查询任何其他用户的元数据，这就要求 Elasticsearch 群集像 RGW 所做的那样来对用户进行身份验证，而这就导致了问题发生。
    </para>
    <para>
     从 Luminous 版本开始，元数据主区域中的 RGW 可为最终用户请求提供服务。这样就无需在公共环境中公开 Elasticsearch 端点，同时也解决了身份验证和授权问题，因为 RGW 本身就能对最终用户请求进行身份验证。出于此目的，RGW 在桶 API 中引入了可为 Elasticsearch 请求提供服务的新查询。所有这些请求必须发送到元数据主区域。
    </para>
    <variablelist>
     <varlistentry>
      <term>获取 Elasticsearch 查询</term>
      <listitem>
       <screen>
GET /<replaceable>BUCKET</replaceable>?query={query-expr}
       </screen>
       <para>
        请求参数：
       </para>
        <itemizedlist>
         <listitem>
          <para>
           max-keys：要返回的最大项数
          </para>
         </listitem>
         <listitem>
          <para>
           marker：分页标记
          </para>
         </listitem>
        </itemizedlist>
       <screen>
expression := [(]&lt;arg&gt; &lt;op&gt; &lt;value&gt; [)][&lt;and|or&gt; ...]
       </screen>
       <para>
         运算符为下列其中一项：&lt;、&lt;=、==、&gt;=、&gt;
       </para>
       <para>
         例如：
       </para>
       <screen>
GET /?query=name==foo
       </screen>
       <para>
        将返回用户有权读取且名为“foo”的所有带索引键。输出将是 XML 格式的键列表，类似于 S3 中“列出桶”请求的响应。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>配置自定义元数据字段</term>
      <listitem>
       <para>
        定义应为哪些自定义元数据项（在指定的桶中）编制索引，以及这些键的类型是什么。如果配置了显式自定义元数据索引，则需要此定义，以便 rgw 为指定的自定义元数据值编制索引。如果未配置，在带索引元数据键的类型不是字符串的情况下，也需要此定义。
       </para>
       <screen>
POST /<replaceable>BUCKET</replaceable>?mdsearch
x-amz-meta-search: &lt;key [; type]&gt; [, ...]
       </screen>
       <para>
        必须使用逗号分隔多个元数据字段，可以使用分号“;”强制指定字段的类型。当前允许的类型包括字符串（默认值）、整数和日期。例如，如果您想将自定义对象元数据 x-amz-meta-year、x-amz-meta-date 和 x-amz-meta-title 的索引分别指定为整数、日期和字符串类型，可执行以下命令
       </para>
       <screen>
POST /mybooks?mdsearch
x-amz-meta-search: x-amz-meta-year;int, x-amz-meta-release-date;date, x-amz-meta-title;string
       </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>删除自定义元数据配置</term>
      <listitem>
       <para>
        删除自定义元数据桶配置。
       </para>
       <screen>
DELETE /<replaceable>BUCKET</replaceable>?mdsearch
       </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>获取自定义元数据配置</term>
      <listitem>
       <para>
        检索自定义元数据桶配置。
       </para>
       <screen>
GET /<replaceable>BUCKET</replaceable>?mdsearch
       </screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ceph.rgw.ldap">
  <title>LDAP 身份验证</title>

  <para>
   除了默认的本地用户身份验证以外，RADOS 网关还能利用 LDAP 服务器服务来对用户进行身份验证。
  </para>

  <sect2 xml:id="ceph.rgw.ldap.how_works">
   <title>身份验证机制</title>
   <para>
    RADOS 网关从令牌提取用户的 LDAP 身份凭证。可以基于用户名构造搜索过滤器。RADOS 网关使用配置的服务帐户在目录中搜索匹配的项。如果找到了某个项，RADOS 网关会尝试使用令牌中的口令绑定到所找到的判别名。如果身份凭证有效，则绑定将会成功，并且 RADOS 网关会授予访问权限。
   </para>
   <para>
    您可以通过将搜索范围设置为特定的组织单位，或者指定自定义搜索过滤器（例如，要求特定的组成员资格、自定义对象类或属性），来限制允许的用户。
   </para>
  </sect2>

  <sect2 xml:id="ceph.rgw.ldap.reqs">
   <title>要求</title>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>LDAP 或 Active Directory</emphasis>：RADOS 网关可访问的运行中 LDAP 实例。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>服务帐户</emphasis>：RADOS 网关要使用且拥有搜索权限的 LDAP 身份凭证。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>用户帐户</emphasis>：LDAP 目录中的至少一个用户帐户。
     </para>
    </listitem>
   </itemizedlist>
   <important>
    <title>LDAP 用户和本地用户不能重叠</title>
    <para>
     不得对本地用户以及要使用 LDAP 进行身份验证的用户使用相同的用户名。RADOS 网关无法区分两者，会将它们视为相同的用户。
    </para>
   </important>
   <tip>
    <title>健康检查</title>
    <para>
     使用 <command>ldapsearch</command> 实用程序可校验服务帐户或 LDAP 连接。例如：
    </para>
<screen>ldapsearch -x -D "uid=ceph,ou=system,dc=example,dc=com" -W \
-H ldaps://example.com -b "ou=users,dc=example,dc=com" 'uid=*' dn</screen>
    <para>
     请务必在 Ceph 配置文件中使用相同的 LDAP 参数，以杜绝可能的问题。
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="ceph.rgw.ldap.config">
   <title>将 RADOS 网关配置为使用 LDAP 身份验证</title>
   <para>
    <filename>/etc/ceph/ceph.conf</filename> 配置文件中的以下参数与 LDAP 身份验证相关：
   </para>
   <variablelist>
    <varlistentry>
     <term><option>rgw_ldap_uri</option>
     </term>
     <listitem>
      <para>
       指定要使用的 LDAP 服务器。请务必使用 <literal>ldaps://<replaceable>fqdn</replaceable>:<replaceable>端口</replaceable></literal>参数，以免公开传输明文身份凭证。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_binddn</option>
     </term>
     <listitem>
      <para>
       RADOS 网关使用的服务帐户的判别名 (DN)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_secret</option>
     </term>
     <listitem>
      <para>
       服务帐户的口令。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rgw_ldap_searchdn</term>
     <listitem>
      <para>
       指定在目录信息树中搜索用户的范围。这可以是用户的组织单位，或某个更具体的组织单位 (OU)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_ldap_dnattr</option>
     </term>
     <listitem>
      <para>
       在构造的搜索过滤器中用来匹配用户名的属性。根据所用的目录信息树 (DIT)，将会是 <literal>uid</literal> 或 <literal>cn</literal>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>rgw_search_filter</option>
     </term>
     <listitem>
      <para>
       如果未指定，则 RADOS 网关会使用 <option>rgw_ldap_dnattr</option> 设置自动构造搜索过滤器。使用此参数能非常灵活地缩小所允许用户列表的范围。有关细节，请参见<xref linkend="ceph.rgw.ldap.filter"/>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ceph.rgw.ldap.filter">
   <title>使用自定义搜索过滤器来限制用户访问</title>
   <para>
    可通过两种方式使用 <option>rgw_search_filter</option> 参数。
   </para>
   <sect3>
    <title>用于进一步限制所构造搜索过滤器的部分过滤器</title>
    <para>
     部分过滤器的示例：
    </para>
<screen>"objectclass=inetorgperson"</screen>
    <para>
     RADOS 网关将照常使用令牌中的用户名和 <option>rgw_ldap_dnattr</option> 的值生成搜索过滤器。然后，构造的过滤器将与 <option>rgw_search_filter</option> 属性中的部分过滤器合并。根据所用的用户名和设置，最终的搜索过滤器可能会变成：
    </para>
<screen>"(&amp;(uid=hari)(objectclass=inetorgperson))"</screen>
    <para>
     在这种情况下，仅当在 LDAP 目录中找到了用户“hari”，该用户具有对象类“inetorgperson”并且确实指定了有效口令时，才向他授予访问权限。
    </para>
   </sect3>
   <sect3>
    <title>完整过滤器</title>
    <para>
     完整过滤器必须包含 <option>USERNAME</option> 令牌，在尝试身份验证期间，该令牌将替换为用户名。在这种情况下，不再使用 <option>rgw_ldap_dnattr</option> 参数。例如，要将有效用户限制为特定的组，可使用以下过滤器：
    </para>
<screen>"(&amp;(uid=USERNAME)(memberOf=cn=ceph-users,ou=groups,dc=mycompany,dc=com))"</screen>
    <note>
     <title><literal>memberOf</literal> 属性</title>
     <para>
      在 LDAP 搜索中使用 <literal>memberOf</literal> 属性需要您实施的特定 LDAP 服务器提供服务器端支持。
     </para>
    </note>
   </sect3>
  </sect2>

  <sect2 xml:id="ceph.rgw.ldap.token">
   <title>生成用于 LDAP 身份验证的访问令牌</title>
   <para>
    <command>radosgw-token</command> 实用程序基于 LDAP 用户名和口令生成访问令牌。它会输出 base-64 编码字符串，即实际的访问令牌。请使用偏好的 S3 客户端（请参见<xref linkend="accessing.ragos.gateway"/>），将该令牌指定为访问密钥，并使用空机密密钥。
   </para>
<screen><prompt>root@minion &gt; </prompt>export RGW_ACCESS_KEY_ID="<replaceable>username</replaceable>"
<prompt>root@minion &gt; </prompt>export RGW_SECRET_ACCESS_KEY="<replaceable>password</replaceable>"
<prompt>root@minion &gt; </prompt>radosgw-token --encode --ttype=ldap</screen>
   <important>
    <title>明文身份凭证</title>
    <para>
     访问令牌是一个 base-64 编码的 JSON 结构，包含明文形式的 LDAP 身份凭证。
    </para>
   </important>
   <note>
    <title>Active Directory</title>
    <para>
     对于 Active Directory，请使用 <option>--ttype=ad</option> 参数。
    </para>
   </note>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.ceph.rgw.configuration">
  <title>配置参数</title>
  <para>
   在 <filename>ceph.conf</filename> 文件中指定大量选项可能会影响对象网关的行为。下面列出了最重要的选项。有关完整列表，请参见 <link xlink:href="http://docs.ceph.com/docs/master/radosgw/config-ref/"/>。
  </para>
  <variablelist>
   <varlistentry>
    <term>rgw_thread_pool_size</term>
    <listitem>
     <para>
      Civetweb 服务器的线程数。如果需要为更多请求提供服务，请增加其值。默认为 100 个线程。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw_num_rados_handles</term>
    <listitem>
     <para>
      对象网关的 RADOS 群集句柄数（请参见 <link xlink:href="http://docs.ceph.com/docs/master/rados/api/librados-intro/#step-2-configuring-a-cluster-handle"/>）。指定可配置的 RADOS 句柄数能够大幅提升所有类型的工作负载的性能。现在，每个 RADOS 网关工作线程都可以在其有效期内选取某个 RADOS 句柄。默认值是 1。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rgw_max_chunk_size</term>
    <listitem>
     <para>
      将在单个操作中读取的数据大块的最大大小。将值增至 4MB (4194304) 可以在处理大型对象时提高性能。默认值为 128kB (131072)。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <sect2 xml:id="sec.ceph.rgw.configuration.notes">
   <title>补充说明</title>
   <variablelist>
    <varlistentry>
     <term>rgw dns name</term>
     <listitem>
      <para>
       如果将参数 <literal>rgw dns name</literal> 添加到 <filename>ceph.conf</filename>，请确保 S3 客户端配置为在 <literal>rgw dns name</literal> 指定的端点上定向请求。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
</chapter>
